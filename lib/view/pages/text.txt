void toggleSummary() {
    setState(() {
      if (isSummarized) {
        summarizedText = '';
      } else {
        summarizedText = summarizeText(originalText);
      }
      isSummarized = !isSummarized;
    });
  }

  String summarizeText(String text) {
    if (text.isEmpty) return 'No text available to summarize.';

    List<String> sentences =
        text.split('.').where((s) => s.trim().isNotEmpty).toList();

    Map<String, int> wordFrequency = {};
    List<String> words = text
        .toLowerCase()
        .split(RegExp(r'\W+'))
        .where((w) => w.isNotEmpty)
        .toList();

    for (String word in words) {
      wordFrequency[word] = (wordFrequency[word] ?? 0) + 1;
    }

    Map<String, int> sentenceScores = {};
    for (String sentence in sentences) {
      int score = 0;
      List<String> sentenceWords = sentence.toLowerCase().split(RegExp(r'\W+'));
      for (String word in sentenceWords) {
        score += wordFrequency[word] ?? 0;
      }
      sentenceScores[sentence.trim()] = score;
    }
    var sortedSentences = sentenceScores.entries.toList()
      ..sort((a, b) => b.value.compareTo(a.value));

    int numberOfSentences = (sentences.length * 0.3).ceil();
    List<String> importantSentences = sortedSentences
        .take(numberOfSentences)
        .map((entry) => entry.key)
        .toList();

    return importantSentences.join('. ') + '.';
  }

  @override
  void dispose() {
    _ttsService.dispose();
    super.dispose();
  }

  String selectedFontFamily = 'Inter';
  FontWeight selectedFontWeight = FontWeight.w700;
  TextDecoration selectedFontDecoration = TextDecoration.none;
  FontStyle selectedFontStyle = FontStyle.normal;

  void _translateWholePage(String targetLang) async {
    try {
      final translation =
          await translator.translate(originalText, to: targetLang);
      setState(() {
        summarizedText = ''; // نفضي ملخص لو في
        isSummarized = false;
        originalText = translation.text;
        cleanedText = translation.text;
        _sentences = cleanedText.split(RegExp(r'(?<=[.!?])\s*'));
      });
    } catch (e) {
      print("Translation failed: $e");
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("Translation failed, try again")),
      );
    }
  }















appBar: AppBar(
        backgroundColor: _isDarkMode ? Color(0xFF212E54) : Colors.white,
        elevation: 0,
        leading: IconButton(
          icon: Icon(
            Icons.arrow_back_ios,
            color: _isDarkMode ? Colors.white : Color(0xFF212E54),
            size: screenWidth * 0.05,
          ),
          tooltip: 'back',
          onPressed: () {
            Get.back();
          },
        ),
        title: Text(
          (widget.book == null || widget.book!.booktitle.isEmpty)
              ? "Unknown Document"
              : widget.book!.booktitle,
          style: TextStyle(
            color: _isDarkMode ? Colors.white : Color(0xFF212E54),
            fontSize: screenWidth *
                0.025 *
                scaleFactor, // Apply the scale factor here
            fontWeight: FontWeight.w600,
          ),
        ),
        actions: [
          IconButton(
            icon: Icon(
              Icons.zoom_in,
              color: Color(0xff949494),
              size: screenWidth * 0.08,
            ),
            tooltip: 'zoom in',
            onPressed: () {
              setState(() {
                scaleFactor += 0.1; // تكبير النص
              });
            },
          ),
          IconButton(
            icon: Icon(
              Icons.zoom_out,
              color: Color(0xff949494),
              size: screenWidth * 0.08,
            ),
            tooltip: 'zoom out',
            onPressed: () {
              setState(() {
                scaleFactor -= 0.1; // تصغير النص
              });
            },
          ),
          IconButton(
            icon: SvgPicture.asset("assets/Icons/night.svg",
                color: _isDarkMode ? Color(0xff949494) : Color(0xffFEC838),
                width: screenWidth * 0.035,
                height: screenHeight * 0.035),
            tooltip: _isDarkMode ? 'light mode' : "dark mode",
            onPressed: () {
              setState(() {
                _isDarkMode = !_isDarkMode;
              });
            },
          ),
          IconButton(
            icon: SvgPicture.asset('assets/Icons/summarize.svg',
                width: screenWidth * 0.035, height: screenHeight * 0.035),
            tooltip: 'summarize',
            onPressed: () {
              showMenu(
                context: context,
                position: RelativeRect.fromLTRB(100.0, 100.0, 100.0, 100.0),
                items: [
                  PopupMenuItem(
                    child: Text('Select Text'),
                    value: 'select_text',
                  ),
                  PopupMenuItem(
                    child: Text(
                      isSummarized
                          ? 'Reset to original content'
                          : 'Summarize the whole page',
                      style: TextStyle(
                        color: isSummarized ? Colors.blueAccent : Colors.black,
                      ),
                    ),
                    value: 'summarizeText',
                  ),
                ],
              ).then((value) {
                if (value == 'select_text') {
                  showDialog(
                    context: context,
                    builder: (BuildContext context) {
                      return SummaryDialog(isDarkMode: _isDarkMode);
                    },
                  );
                } else if (value == 'summarizeText') {
                  setState(() {
                    if (isSummarized) {
                      summarizedText = '';
                    } else {
                      summarizedText = summarizeText(originalText);
                    }
                    isSummarized = !isSummarized;
                  });
                }
              });
            },
          ),
          IconButton(
            icon: SvgPicture.asset('assets/Icons/format.svg',
                color: Color(0xff949494),
                width: screenWidth * 0.035,
                height: screenHeight * 0.035),
            tooltip: 'text format',
            onPressed: () {
              showFontMenu(context, (value) {
                setState(() {
                  if (value == 'Bold') {
                    selectedFontWeight = (selectedFontWeight == FontWeight.bold)
                        ? FontWeight.normal
                        : FontWeight.bold;
                  } else if (value == 'Underline') {
                    selectedFontDecoration =
                        (selectedFontDecoration == TextDecoration.underline)
                            ? TextDecoration.none
                            : TextDecoration.underline;
                  } else if (value == 'Italic') {
                    selectedFontStyle = (selectedFontStyle == FontStyle.italic)
                        ? FontStyle.normal
                        : FontStyle.italic;
                  } else {
                    selectedFontFamily = value ?? selectedFontFamily;
                  }
                });
              });
            },
          ),
          IconButton(
            icon: SvgPicture.asset('assets/Icons/translate.svg',
                width: screenWidth * 0.035, height: screenHeight * 0.035),
            tooltip: 'translate',
            onPressed: () {
              showMenu(
                context: context,
                position: RelativeRect.fromLTRB(100.0, 100.0, 100.0, 100.0),
                items: [
                  PopupMenuItem(
                    child: Text('Select Text'),
                    value: 'select_text',
                  ),
                  PopupMenuItem(
                    child: Text('Translate the whole page'),
                    value: 'translateText',
                  ),
                ],
              ).then((value) {
                if (value == 'select_text') {
                  showDialog(
                    context: context,
                    builder: (BuildContext context) {
                      return TranslateDialog(isDarkMode: _isDarkMode);
                    },
                  );
                } else if (value == 'translateText') {
                  showDialog(
                    context: context,
                    builder: (context) {
                      String? selectedLangCode;

                      return StatefulBuilder(
                        builder: (context, setState) {
                          return AlertDialog(
                            title: Text("Select a language"),
                            content: DropdownButton<String>(
                              value: selectedLangCode,
                              hint: Text("Choose language"),
                              items: [
                                DropdownMenuItem(
                                    value: 'en', child: Text("English")),
                                DropdownMenuItem(
                                    value: 'ar', child: Text("Arabic")),
                                DropdownMenuItem(
                                    value: 'fr', child: Text("French")),
                              ],
                              onChanged: (value) {
                                setState(() {
                                  selectedLangCode = value!;
                                });
                              },
                            ),
                            actions: [
                              TextButton(
                                onPressed: () {
                                  if (selectedLangCode != null) {
                                    Get.back();
                                    _translateWholePage(selectedLangCode!);
                                  }
                                },
                                child: Text("Translate"),
                              )
                            ],
                          );
                        },
                      );
                    },
                  );
                }
              });
            },
          ),
          IconButton(
              onPressed: () {
                setState(() {
                  isSearching = !isSearching;
                });
                if (isSearching) {
                  searchController.isSearching.value = true;
                  searchController.initializeSearch(_sentences);
                  searchController.updateSearchTerm("");
                  highlightController.updateHighlight("");
                } else {
                  searchController.isSearching.value = false;
                }
              },
              icon: Icon(Icons.search,
                  size: screenWidth * 0.08,
                  color: searchController.isSearching.value
                      ? Color(0xffFEC838)
                      : Color(0xff949494))),
        ],
      ),